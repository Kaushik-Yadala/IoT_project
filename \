import base64
import json
import os
from contextlib import asynccontextmanager
from datetime import datetime
from io import BytesIO

import requests

# sensitive Info like URI...
import sensitiveInfo
from fastapi import FastAPI, HTTPException, Request
from landingai.predict import Predictor
from PIL import Image
from pydantic import BaseModel
from pymongo import MongoClient
from starlette.types import Lifespan

# to initiate subscriber:
# ‚ï∞‚îÄ‚ùØ curl -X POST http://localhost:5089/\~/in-cse/in-name/UltrasoundData \                                                                            ‚îÄ‚ïØ
#   -H "X-M2M-Origin: admin:admin" \
#   -H "Content-Type: application/vnd.onem2m-res+json; ty=23" \
#   -d '{
#     "m2m:sub": {
#       "rn": "subFastAPI",
#       "nu": ["http://127.0.0.1:8000/notify"],
#       "nct": 2
#     }
#   }'


# MongoDB connection
try:
    client = MongoClient(sensitiveInfo.MONGO_URI)
    db = client[sensitiveInfo.DB_NAME]
    collection = db[sensitiveInfo.COLLECTION_NAME]
    print("‚úÖ Connected to MongoDB Atlas")
    print("üìÅ DB:", db.name)
    print("üìÇ Collection:", collection.name)
except Exception as e:
    print("‚ùå MongoDB Connection Error:", e)
    raise


def subscribe_to_om2m():
    OM2M_URI = "http://localhost:5089/~/in-cse/in-name/UltrasoundData"

    headers = {
        "X-M2M-Origin": "admin:admin",
        "Content-Type": "application/vnd.onem2m-res+json; ty=23",
    }

    payload = {
        "m2m:sub": {
            "rn": "subFastAPI",  # resource name
            "nu": ["http://localhost:8000/notify"],  # notify to this endpoint
            "nct": 2,  # notification content type
        }
    }

    try:
        response = requests.post(OM2M_URI, headers=headers, json=payload)
        print("üì° Subscription Response Code:", response.status_code)
        print("üì® Subscription Response:", response.text)
    except Exception as e:
        print("‚ùå OM2M Subscription Failed:", e)


@asynccontextmanager
async def lifespan(app: FastAPI):
    subscribe_to_om2m()
    yield


# FastAPI app
app = FastAPI(lifespan=lifespan)


# updating mongo based on OM2M
@app.post("/notify")
async def notify(request: Request):
    try:
        body = await request.json()
        print("üì® Received body:\n", json.dumps(body, indent=2))

        con_raw = body["m2m:sgn"]["m2m:nev"]["m2m:rep"]["m2m:cin"]["con"]
        sensor_data = json.loads(con_raw)

        # ----------- JSON LOOK ----------------
        # track_id
        # time
        # ultrasound_reading_1
        # ultrasound_reading_2
        # image_encoding
        # temperature

        # decode the image from the encoding
        encoded = sensor_data["image_encoding"]
        image_data = base64.b64decode(encoded)

        # create a Pillow image
        image = Image.open(BytesIO(image_data))

        # api call to landing lens to get final verdict
        predictor = Predictor(sensitiveInfo.ENDPOINT_ID, api_key=sensitiveInfo.API_KEY)
        predictions = predictor.predict(image)
        print(predictions)
        # ouput format: LIST: [ClassificationPrediction(score=0.9980272650718689, label_name='Defective', label_index=0)]
        condition = predictions[0].label_name
        # then determine and modify the dict st it includes everything
        sensor_data["condition"] = condition
        # check if defective then inform the respective container
        if condition == "Defective":
            notifyDefective(condition)

        collection.insert_one(sensor_data)

        print("‚úÖ Data inserted:", sensor_data)
        return {"status": "ok", "message": "Data stored"}

    except Exception as e:
        print("‚ùå Error parsing OM2M notification:", e)
        return {"status": "error", "detail": str(e)}


def notifyDefective(condition: str):
    # the uri
    OM2M_URI = "http://127.0.0.1:5089/~/in-cse/in-name/condition"

    # converting input into a string
    sensor_dict = {"track_condition": condition}

    # the headers
    headers = {
        "X-M2M-Origin": "admin:admin",
        "X-M2M-RI": "FastAPI",
        "Content-Type": "application/vnd.onem2m-res+json; ty=4",
    }

    # the payload
    payload = {"m2m:cin": {"con": json.dumps(sensor_dict)}}

    response = requests.post(OM2M_URI, headers=headers, json=payload)

    print("Status Code:", response.status_code)
    print("Response:", response.text)
